---
import { Image } from '@astrojs/image/components';

import IconButton from '@/atoms/icon-button.astro';
import LabelledValue from '@/atoms/labelled-value.astro';
import Tag from '@/atoms/tag.astro';
import Timestamp from '@/atoms/timestamp.astro';
import Typography from '@/atoms/typography.astro';
import type { I18n } from '@/types/i18n';
import type { IconName } from '@/types/icon';
import type { Project } from '@/types/portfolio-section';

export interface Props extends astroHTML.JSX.HTMLAttributes {
  value: Project;
  i18n: I18n;
}
const { value, i18n, ...props } = Astro.props;
const ProjectTimelineItem = 'div';

const setLabelValue = (val: string | string[]) =>
  Array.isArray(val) ? val.map((v, id) => (id !== val.length - 1 ? v.concat(', ') : v)) : val;
---

<ProjectTimelineItem class:list={[props.className]}>
  <div class:list={['flex', 'flex-col', 'sm:grid', 'overflow-hidden', 'grid-cols-[120px_minmax(200px,_1fr)]', 'gap-2']}>
    <Image
      class:list={['rounded-lg', 'object-cover', 'max-w-[120px]', 'm-0', 'overflow-hidden', 'sm:block', 'hidden']}
      src={value.image}
      aspectRatio="1/1"
      alt={''}
      format="webp"
    />
    <div class:list={['col-start-2', 'col-span-2', 'sm:mx-6']}>
      <div class:list={['flex', 'justify-between']}>
        <Typography variant="item-title">{value.name}</Typography>
        <div class:list={['fixed', 'top-3', 'right-3', 'md:flex', 'md:flex-wrap', 'gap-3', '[&>a]:my-2']}>
          {value.socials?.map(({ icon, url }) => <IconButton icon={icon} href={url} target="_blank" size="small" />)}
        </div>
      </div>
      <Timestamp
        startDate={value.startDate}
        endDate={value.endDate}
        locale={i18n.locale}
        translationForNow={i18n.translations.now[i18n.language]}
      />
      <Image
        class:list={['rounded-lg', 'object-cover', 'my-2', 'max-w-[120px]', 'sm:block', 'sm:hidden']}
        src={value.image}
        aspectRatio="1/1"
        alt={''}
        format="webp"
      />
      <div class:list={['flex', 'md:gap-3', 'md:flex-row', 'flex-col', 'my-4']}>
        <div class:list={['md:w-2/6']}>
          {
            value.details
              .slice(0, value.details.length / 2)
              .map((d) => <LabelledValue label={d.label} value={setLabelValue(d.value)} />)
          }
        </div>
        <div>
          {
            value.details
              .slice(value.details.length / 2)
              .map((d) => <LabelledValue label={d.label} value={setLabelValue(d.value)} />)
          }
        </div>
      </div>
    </div>
    <div class:list={['col-start-1 col-span-3']}>
      <Typography variant="paragraph">{value.description}</Typography>
    </div>
    <div class:list={['flex', 'gap-3', 'flex-wrap', 'sm:flex-nowrap', 'mt-6']}>
      {value.tags.map((t) => <Tag icon={{ name: t.icon as IconName, color: t.iconColor as string }}>{t.name}</Tag>)}
    </div>
  </div>
</ProjectTimelineItem>
